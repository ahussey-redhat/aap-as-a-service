# WIP
# This should:
# 1. Deploy an AAP instance, specific to the ServiceNow incident that was raised
# 2. Be managed utilizing GitOps
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: Customize the AAP instance
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/tags: aap
  name: customise-aap-instance
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    operator.tekton.dev/provider-type: ahussey
spec:
  description: >-
    This task runs all the commands required to customise the baseline AAP instance.
  params:
    - default: "20"
      description: The max number of managed nodes
      name: maxHosts
      type: string
    - description: Branch name
      name: branchName
      type: string
    - description: Team name
      name: teamName
      type: string
    - description: AAP instance owner
      name: owner
      type: string
    - description: ServiceNow incident ID
      name: serviceNowIncidentID
      type: string
    - description: AAP instance number
      name: instanceID
      type: string
    - default: "false"
      description: Is this AAP instance already defined?
      name: isAlreadyDefined
      type: string
    - default: url
      description: OpenShift application URL
      name: appUrl
      type: string
  steps:
    # Perform operations that require YQ
    - name: edit-aap-instance-gitops-application
      image: >-
        quay.io/ahussey/tekton-utils@sha256:07be338b30b20130621039fdaaab8d2909c0757959563a5bf1ffae506e1df5d3
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export INSTANCE_ALREADY_DEFINED=$(params.isAlreadyDefined)

        if [[ ${INSTANCE_ALREADY_DEFINED} == "true" ]]; then
          echo "AAP instance already defined. Skipping step."
          exit 0
        fi

        export BRANCH_NAME=$(params.branchName)
        export TEAM_NAME=$(params.teamName)
        export INSTANCE_ID=$(params.instanceID)
        export OWNER=$(params.owner)
        export SERVICE_NOW_INCIDENT_ID=$(params.serviceNowIncidentID)
        export APP_URL=$(params.appUrl)

        cd $(workspaces.output.path)/environments/${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}

        # Configure AAP ArgoCD application name
        yq -ei ".metadata.name |= envsubst" application.yml

        # Configure AAP ArgoCD application namespace
        yq -ei ".metadata.namespace |= envsubst" application.yml

        # Configure destination namespace
        yq -ei ".spec.destination.namespace |= envsubst" application.yml

        # Configure environment path
        yq -ei ".spec.source.path |= envsubst" application.yml

        # Configure ArgoCD application labels
        yq -ei ".metadata.labels.servicenowincidentid |= envsubst" application.yml
        yq -ei ".metadata.labels.owner |= envsubst" application.yml

        # Configure AAP Operator
        yq -ei ".metadata.namespace |= envsubst" aap-instance/base/operatorgroup.yml
        yq -ei ".spec.targetNamespaces.[0] |= envsubst" aap-instance/base/operatorgroup.yml
        yq -ei ".metadata.namespace |= envsubst" aap-instance/base/subscription.yml
        yq -ei ".namespace |= envsubst" kustomization.yaml
        yq -ei ".metadata.namespace |= envsubst" aap-instance/base/rolebinding.yml

        # Configure Controller instance
        yq -ei ".metadata.name |= envsubst" aap-instance/base/controller.yml
        yq -ei ".spec.route_host |= envsubst" aap-instance/base/controller.yml
        yq -ei ".metadata.name |= envsubst" aap-instance/base/controller_route.yml
        yq -ei ".metadata.labels.\"app.kubernetes.io/part-of\" |= envsubst" aap-instance/base/controller_route.yml
        yq -ei ".spec.host |= envsubst" aap-instance/base/controller_route.yml
        yq -ei ".spec.to.name |= envsubst" aap-instance/base/controller_route.yml

        # Configure PAH instance
        yq -ei ".metadata.name |= envsubst" aap-instance/base/hub.yml
        yq -ei ".spec.route_host |= envsubst" aap-instance/base/hub.yml
        yq -ei ".metadata.name |= envsubst" aap-instance/base/hub_route.yml
        yq -ei ".metadata.labels.\"app.kubernetes.io/part-of\" |= envsubst" aap-instance/base/hub_route.yml
        yq -ei ".spec.host |= envsubst" aap-instance/base/hub_route.yml
        yq -ei ".spec.to.name |= envsubst" aap-instance/base/hub_route.yml

        # Configure EDA instance
        yq -ei ".metadata.name |= envsubst" aap-instance/base/eda.yml
        yq -ei ".spec.route_host |= envsubst" aap-instance/base/eda.yml
        yq -ei ".spec.automation_server_url |= envsubst" aap-instance/base/eda.yml
        yq -ei ".metadata.name |= envsubst" aap-instance/base/eda_route.yml
        yq -ei ".metadata.labels.\"app.kubernetes.io/part-of\" |= envsubst" aap-instance/base/eda_route.yml
        yq -ei ".spec.host |= envsubst" aap-instance/base/eda_route.yml
        yq -ei ".spec.to.name |= envsubst" aap-instance/base/eda_route.yml
        yq -ei ".metadata.labels.\"app.kubernetes.io/name\" |= envsubst" aap-instance/base/eda_route.yml

        exit 0
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532

    # Push changes to ArgoCD repo
    - name: git-push
      image: >-
        registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:1a50511583fc02a27012d17d942e247813404104ddd282d7e26f99765174392c
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export INSTANCE_ALREADY_DEFINED=$(params.isAlreadyDefined)

        if [[ ${INSTANCE_ALREADY_DEFINED} == "true" ]]; then
          echo "AAP instance already defined. Skipping step."
          exit 0
        fi

        export BRANCH_NAME=$(params.branchName)
        export TEAM_NAME=$(params.teamName)
        export INSTANCE_ID=$(params.instanceID)
        export OWNER=$(params.owner)
        export SERVICE_NOW_INCIDENT_ID=$(params.serviceNowIncidentID)

        cd $(workspaces.output.path)

        git config --global --add safe.directory $(workspaces.output.path)
        git config --global user.name "${OWNER}"
        git config --global user.email "${OWNER}@example.com"

        # Configure SSH keys
        git config core.sshCommand "ssh -v -i $(workspaces.ssh-directory.path)/id_rsa -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"

        git fetch --all
        git checkout -b main
        git branch --set-upstream-to=origin/main main
        git add --all
        git commit -m "Add ${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID} environment"
        git push -u origin main -f

        exit 0

  # Workspace definitions
  workspaces:
    - description: >-
        The workspace which contains kubernetes manifests which we want to apply
        on the cluster.
      name: manifest-dir
      optional: true
    - description: >-
        The workspace which contains the the kubeconfig file if in case we want
        to run the oc command on another cluster.
      name: kubeconfig-dir
      optional: true
    - description: >-
        The workspace which contains the SSH configuration and certificates.
      name: ssh-directory
    - description: >-
        The workspace which contains the ArgoCD cloned git repository
      name: output
