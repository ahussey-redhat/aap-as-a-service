# WIP
# This task should:
# 1. create CRD instances to create an organization within the AAP instance
# 2. configure SSO for external auth
# 3. sync content for PAH
# 4. configure logging and metrics
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: Conduct Day1 Operations
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/tags: aap
  name: conduct-day1-ops
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    operator.tekton.dev/provider-type: ahussey
spec:
  description: >-
    This task runs all the commands required to deploy an AAP instance.
  params:
    - default: "20"
      description: The max number of managed nodes
      name: maxHosts
      type: string
    - description: Branch name
      name: branchName
      type: string
    - description: Team name
      name: teamName
      type: string
    - description: AAP instance owner
      name: owner
      type: string
    - description: ServiceNow incident ID
      name: serviceNowIncidentID
      type: string
    - description: AAP instance number
      name: instanceID
      type: string
    - default: "false"
      description: Is this AAP instance already defined?
      name: instanceAlreadyDefined
      type: string
    - default: password
      description: Admin password for this AAP instance
      name: adminPassword
      type: string
  steps:
    # Update appropriate variables for the AAP instance
    - name: upload-manifest-to-aap
      image: >-
        registry.redhat.io/devspaces/udi-rhel8:latest
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export BRANCH_NAME=$(params.branchName)
        export TEAM_NAME=$(params.teamName)
        export INSTANCE_ID=$(params.instanceID)
        export OWNER=$(params.owner)
        export SERVICE_NOW_INCIDENT_ID=$(params.serviceNowIncidentID)

        cd $(workspaces.output.path)/environments/${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}

        # Upload manifest - https://access.redhat.com/solutions/5948011
        echo "{\"manifest\": \"$(base64 -w0 $(workspaces.aap-manifest.path)/manifest.zip)\"}" > manifest_payload.json
        curl -vk \
        -u "admin:$(params.adminPassword)" \
        -X POST \
        -H 'Content-Type:application/json' \
        -d @manifest_payload.json \
        https://${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}-controller.apps.k8s.sandbox1017.opentlc.com/api/v2/config/

        exit 0
    - name: modify-default-organization-maxhosts
      image: >-
        registry.redhat.io/devspaces/udi-rhel8:latest
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export BRANCH_NAME=$(params.branchName)
        export TEAM_NAME=$(params.teamName)
        export INSTANCE_ID=$(params.instanceID)
        export OWNER=$(params.owner)
        export SERVICE_NOW_INCIDENT_ID=$(params.serviceNowIncidentID)
        export MAX_HOSTS=$(params.maxHosts)

        cd $(workspaces.output.path)/environments/${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}

        # Update maxHosts for Default organization
        curl -vk \
        -u "admin:$(params.adminPassword)" \
        -X POST \
        -H 'Content-Type:application/json' \
        -d "{
          \"name\": \"Default\",
          \"max_hosts\": \"${MAX_HOSTS}\"
        }" \
        https://${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}-controller.apps.k8s.sandbox1017.opentlc.com/api/v2/organizations/

        exit 0

  # Workspace definitions
  workspaces:
    - description: >-
        The workspace which contains kubernetes manifests which we want to apply
        on the cluster.
      name: manifest-dir
      optional: true
    - description: >-
        The workspace which contains the the kubeconfig file if in case we want
        to run the oc command on another cluster.
      name: kubeconfig-dir
      optional: true
    - description: >-
        The workspace which contains the ArgoCD cloned git repository
      name: output
    - description: >-
        The workspace which contains the Ansible Automation Platform manifest.
      name: aap-manifest
