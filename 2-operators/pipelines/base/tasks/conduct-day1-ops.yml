# WIP
# This task should:
# 1. create CRD instances to create an organization within the AAP instance
# 2. configure SSO for external auth
# 3. sync content for PAH
# 4. configure logging and metrics
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    tekton.dev/displayName: Conduct Day1 Operations
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/tags: aap
  name: conduct-day1-ops
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/operand-name: openshift-pipelines-addons
    operator.tekton.dev/provider-type: ahussey
spec:
  description: >-
    This task runs all the commands required to deploy an AAP instance.
  params:
    - description: The max number of managed nodes
      name: maxHosts
      type: string
    - description: Branch name
      name: branchName
      type: string
    - description: Team name
      name: teamName
      type: string
    - description: AAP instance owner
      name: owner
      type: string
    - description: ServiceNow incident ID
      name: serviceNowIncidentID
      type: string
    - description: AAP instance number
      name: instanceID
      type: string
    - default: "false"
      description: Is this AAP instance already defined?
      name: isAlreadyDefined
      type: string
    - default: password
      description: Admin password for this AAP instance
      name: adminPassword
      type: string
    - default: url
      description: OpenShift application URL
      name: appUrl
      type: string
  steps:
    # Update appropriate variables for the AAP instance
    - name: upload-manifest-to-aap
      image: >-
        registry.redhat.io/devspaces/udi-rhel8:latest
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export INSTANCE_ALREADY_DEFINED=$(params.isAlreadyDefined)

        echo "Waiting for 60 seconds for AAP Controller to be up"
        sleep 60

        # if [[ ${INSTANCE_ALREADY_DEFINED} == "true" ]]; then
        #   echo "AAP instance already defined. Skipping step."
        #   exit 0
        # fi

        export BRANCH_NAME=$(params.branchName)
        export TEAM_NAME=$(params.teamName)
        export INSTANCE_ID=$(params.instanceID)
        export OWNER=$(params.owner)
        export SERVICE_NOW_INCIDENT_ID=$(params.serviceNowIncidentID)
        export APP_URL=$(params.appUrl)

        cd $(workspaces.output.path)/environments/${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}

        # Upload manifest - https://access.redhat.com/solutions/5948011
        curl -vk \
        -u "admin:$(params.adminPassword)" \
        -X POST \
        -H 'Content-Type:application/json' \
        -d "{
          \"manifest\": \"$(base64 -w0 $(workspaces.aap-manifest.path)/manifest.zip)\"
        }" \
        https://${TEAM_NAME}-controller-${INSTANCE_ID}.${APP_URL}/api/v2/config/

        exit 0
    - name: modify-default-organization
      image: >-
        registry.redhat.io/devspaces/udi-rhel8:latest
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export INSTANCE_ALREADY_DEFINED=$(params.isAlreadyDefined)

        # if [[ ${INSTANCE_ALREADY_DEFINED} == "true" ]]; then
        #   echo "AAP instance already defined. Skipping step."
        #   exit 0
        # fi

        export BRANCH_NAME=$(params.branchName)
        export TEAM_NAME=$(params.teamName)
        export INSTANCE_ID=$(params.instanceID)
        export OWNER=$(params.owner)
        export SERVICE_NOW_INCIDENT_ID=$(params.serviceNowIncidentID)
        export MAX_HOSTS=$(params.maxHosts)
        export APP_URL=$(params.appUrl)

        cd $(workspaces.output.path)/environments/${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}
        echo "Setting maxHosts: ${MAX_HOSTS}"
        # Update maxHosts for Default organization
        curl -vk \
        -u "admin:$(params.adminPassword)" \
        -X PATCH \
        -H 'Content-Type:application/json' \
        -d "{
          \"max_hosts\": ${MAX_HOSTS},
          \"description\": \"${BRANCH_NAME}/${TEAM_NAME}/${INSTANCE_ID}/${SERVICE_NOW_INCIDENT_ID}\"
        }" \
        https://${TEAM_NAME}-controller-${INSTANCE_ID}.${APP_URL}/api/v2/organizations/1/

        exit 0

    - name: configure-team
      image: >-
        registry.redhat.io/devspaces/udi-rhel8:latest
      resources: {}
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export INSTANCE_ALREADY_DEFINED=$(params.isAlreadyDefined)

        # if [[ ${INSTANCE_ALREADY_DEFINED} == "true" ]]; then
        #   echo "AAP instance already defined. Skipping step."
        #   exit 0
        # fi

        export BRANCH_NAME=$(params.branchName)
        export TEAM_NAME=$(params.teamName)
        export INSTANCE_ID=$(params.instanceID)
        export OWNER=$(params.owner)
        export SERVICE_NOW_INCIDENT_ID=$(params.serviceNowIncidentID)
        export APP_URL=$(params.appUrl)

        cd $(workspaces.output.path)/environments/${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}
        echo "Configuring team mapping"
        # Configure team mapping
        curl -vk \
        -u "admin:$(params.adminPassword)" \
        -X PATCH \
        -H 'Content-Type:application/json' \
        -d "{
        \"SOCIAL_AUTH_ORGANIZATION_MAP\": {
              \"Default\": {
                \"admins\": \"/.*(${TEAM_NAME}).*\$/\",
                \"remove_admins\": true,
                \"users\": \"/.*(${TEAM_NAME}).*\$/\",
                \"remove_users\": true
              }
          },
          \"SOCIAL_AUTH_USER_FIELDS\": [
            \"username\"
          ]
        }" \
        https://${TEAM_NAME}-controller-${INSTANCE_ID}.${APP_URL}/api/v2/settings/authentication/

        exit 0

    - name: configure-sso
      image: >-
        registry.redhat.io/devspaces/udi-rhel8:latest
      resources: {}
      env:
        - name: SSO_OIDC_KEY
          valueFrom:
            secretKeyRef:
              name: oidc
              key: key
        - name: SSO_OIDC_SECRET
          valueFrom:
            secretKeyRef:
              name: oidc
              key: secret
        - name: SSO_OIDC_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: oidc
              key: endpoint
        - name: SSO_OIDC_VERIFY_SSL
          valueFrom:
            secretKeyRef:
              name: oidc
              key: verify-ssl
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        export INSTANCE_ALREADY_DEFINED=$(params.isAlreadyDefined)

        # if [[ ${INSTANCE_ALREADY_DEFINED} == "true" ]]; then
        #   echo "AAP instance already defined. Skipping step."
        #   exit 0
        # fi

        export BRANCH_NAME=$(params.branchName)
        export TEAM_NAME=$(params.teamName)
        export INSTANCE_ID=$(params.instanceID)
        export OWNER=$(params.owner)
        export SERVICE_NOW_INCIDENT_ID=$(params.serviceNowIncidentID)
        export MAX_HOSTS=$(params.maxHosts)
        export APP_URL=$(params.appUrl)

        cd $(workspaces.output.path)/environments/${BRANCH_NAME}-${TEAM_NAME}-${INSTANCE_ID}
        echo "Configuring SSO"
        # Configure SSO
        curl -vk \
        -u "admin:$(params.adminPassword)" \
        -X PATCH \
        -H 'Content-Type:application/json' \
        -d "{
          \"SOCIAL_AUTH_OIDC_KEY\": \"${SSO_OIDC_KEY}\",
          \"SOCIAL_AUTH_OIDC_SECRET\": \"${SSO_OIDC_SECRET}\",
          \"SOCIAL_AUTH_OIDC_OIDC_ENDPOINT\": \"${SSO_OIDC_ENDPOINT}\",
          \"SOCIAL_AUTH_OIDC_VERIFY_SSL\": ${SSO_OIDC_VERIFY_SSL}
        }" \
        https://${TEAM_NAME}-controller-${INSTANCE_ID}.${APP_URL}/api/v2/settings/oidc/

        exit 0
  # Workspace definitions
  workspaces:
    - description: >-
        The workspace which contains kubernetes manifests which we want to apply
        on the cluster.
      name: manifest-dir
      optional: true
    - description: >-
        The workspace which contains the the kubeconfig file if in case we want
        to run the oc command on another cluster.
      name: kubeconfig-dir
      optional: true
    - description: >-
        The workspace which contains the ArgoCD cloned git repository
      name: output
    - description: >-
        The workspace which contains the Ansible Automation Platform manifest.
      name: aap-manifest
